name: Build and ZAP Scan

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  zap-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      # Installer .NET
      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

        # Cette commande va :
        # 1) Construire l'image à partir de 'dockerfile' pour le service 'web'
        # 2) Lancer les services : web, db, migrate (si dépendances), phpmyadmin, etc.
      - name: Build and launch app via docker-compose
        run: docker compose up -d --build

        # pause pour laisser le temps à l'app de se mettre en route, puis on test l'url afin de savoir si c'est bien up ou on arrete l'execution du scan
      - name: Wait for the service to be ready
        run: |
          sleep 20
          curl --fail http://localhost:5000 || exit 1
        
        # Détails de la commande ci-dessous ligne par ligne :
        # - On crée dossier zap-wrk dans le build Git Actions
        # - On accorde les accès de lecture/ecriture/execution à tous (évite les problèmes pour générer le rapport)
        # - On lance un conteneur docker nommé zap-scan
        # - On force l'execution en tant que "root"
        # - On monte un volume entre Git Actions et le conteneur docker
        # - On utilise l'image docker "zaproxy/zap-stable"
        # - On lance le script "baseline" qui permet un scan rapide. ("full-scan" aurait permis un scan plus agressif)
        # - On spécifie l'url à scanner
        # - On nomme le fichier de rapport de scan généré
        # - On ajoute une option pour ne pas échoué le scan en cas de "warning", dans ce cas, une erreur est généré qu'en cas d'erreur de niveau "FAIL"
      - name: Run ZAP Baseline Scan
        run: |
          mkdir zap-wrk
          chmod 777 zap-wrk
          docker run --rm --network host --name zap-scan \
            --user 0:0 \
            -v ${{ github.workspace }}/zap-wrk:/zap/wrk \
            zaproxy/zap-stable \
            zap-baseline.py \
              -t http://localhost:5000 \
              -r zap_report.html \
              -I

        # On génére le rapport
      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap_report.html

        # On ferme les container
      - name: Shutdown containers
        if: always()
        run: docker compose down