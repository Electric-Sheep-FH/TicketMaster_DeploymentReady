name: Build and ZAP Scan

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  zap-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      # (Facultatif) Installer .NET si tu souhaites exécuter des commandes dotnet
      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Build and launch app via docker-compose
        run: docker compose up -d --build
        # Cette commande va :
        # 1) Construire l'image à partir de 'dockerfile' pour le service 'web'
        # 2) Lancer les services : web, db, migrate (si dépendances), phpmyadmin, etc.
        # Le service "web" écoute sur le port 80 interne, mappé sur le 5000 de l'hôte.

      - name: Wait for the service to be ready
        run: |
          # Petite pause pour laisser la base et l'app se mettre en route.
          sleep 20
          # Test simple : si l'URL renvoie une 2xx/3xx, on suppose que c'est up
          curl --fail http://localhost:5000 || exit 1

      - name: Run ZAP Baseline Scan
        run: |
          # On exécute l'image officielle 'owasp/zap2docker' 
          # en pointant sur localhost:5000
          # --network host : sous GitHub Actions, ça permet à ZAP d'accéder à localhost.
          # On monte "/zap/wrk" vers le dossier "zap-reports" du repo
          docker run --rm --network host --name zap-scan \
          zaproxy/zap-stable \
          zap-baseline.py \
          -t http://localhost:5000 \
          -r /zap/zap_report.html
          # -t : target
          # -r : nom du rapport (généré dans le conteneur, on le récupérera juste après si on le copie)
          
          # ⚠ Pour récupérer le rapport, on peut soit le faire via volume, 
          #    soit le copier du conteneur. Par exemple :
          docker cp zap-scan:/zap/zap_report.html zap_report.html
          # Ici, on copie depuis le dernier conteneur lancé (-lq => last container ID).
          # Si tu préfères un volume, configure --volume ...
          # À défaut, tu peux aussi faire un "docker run -v ${{ github.workspace }}:/zapfiles ..."
          # et générer directement le rapport dans "/zapfiles".

      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap_report.html

      - name: Shutdown containers
        if: always()
        run: docker compose down