services:
  web:
    build:
      context: . # ðŸš€ Assure que Docker prend la racine (TicketMaster_Docker)
      dockerfile: dockerfile
    ports:
      - "5000:80" # Mappe le port 80 du conteneur au port 5000 de l'hÃ´te
    depends_on:
      - db
      - migrate
    environment:
      # Exemple de chaÃ®ne de connexion pour MySQL :
      - PORT=80
      - ASPNETCORE_URLS=http://+:${PORT}
      - ConnectionStrings__WebAppDbContextConnection=Server=db;Database=filrouge_final;User=root;Password=;SslMode=none;

  db:
    image: mysql:8.0
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ""
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      MYSQL_DATABASE: filrouge_final
      MYSQL_USER: user
      MYSQL_PASSWORD: ""
    volumes:
      - db_data:/var/lib/mysql
    ports:
      - "3306:3306"

  migrate:
    image: mcr.microsoft.com/dotnet/sdk:8.0
    working_dir: /app/FilRouge_TicketMaster_MVC_Core
    command: sh -c "dotnet ef database update --project FilRouge_TicketMaster_MVC_Core.csproj"
    volumes:
      - .:/app
    depends_on:
      - db
  tests:
    build:
      context: . # ðŸš€ Utiliser la racine
      dockerfile: dockerfile
    command: dotnet test --logger trx --results-directory TestResults
    volumes:
      - .:/app
    depends_on:
      - db
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    restart: always
    environment:
      - PMA_HOST=ticketmaster_deploymentready.railway.internal
      - PMA_USER=root
      - PMA_PASSWORD=
    ports:
      - "8081:80"
    depends_on:
      - db

volumes:
  db_data:
